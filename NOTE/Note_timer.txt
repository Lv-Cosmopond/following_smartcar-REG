高级定时器的可用16位or32位进行操作的寄存器：
TIMx->CR1;		TIMx->CR2;		TIMx->SMCR;		TIMx->DIER;		TIMx->SR;	
TIMx->EGR;		TIMx->CMMR1;	TIMx->CMME2;	TIMx->CCER;		TIMx->BDTR;
TIMx->DCR;		TIMx->DCR;		TIMx->DMAR;		
TIMx->CNT;		TIMx->PSC;		TIMx->ARR;		TIMx->RCR;		TIMx->CCRx;

本工程用到，编码器，PWM输出

/**************************************编码器******************************************
/////////	思 路	//////////
	CNT根据外部输入的信号来计数，然后把这个值存起来用于它用(算转速or提供PID算法的参数) 
	TIM在编码器模式下，会一直从0往ARR计数，又因为CNT可读可写，读取后，清空CNT就好。
		CNT会自动继续从0接着计数；	//除非TIMx->SMS选择某些模式，这某些模式会停止CNT）；
	这就需要计算规定时间内，CNT的值，以判断外部输入的速度（or频率)；
	
	于是设定一个定时中断的任务，规定时间一到，会产生读取、清空CNT的命令；
		直接读取CNT的好处在于，不用管后续CCRx又更新啊、中断啊、重新启动TIMx与否...的操作，因为我也不用它（但还是要假巴意思配置一下）。
	其余时间就拿去让CPU处理这些值和其他操作；
	
////////////	步 骤	///////////
一.相应外设使能：RCC->APB1ENR or RCC->APB2ENR 使能TIMx，顺便，看看要不要用到IO口;

二.外部信号通过CH1进入后，经过异或门，出来后，该信号称为TI1；
	TI1遇到数字滤波器（输入滤波器和边沿检测器）ETR：
		其频率需要被用来作为CNT的计数频率，这里可以考虑是否分频后再使用，若要分频，分频后的频率就是f(DTS);
			TIMx->CR1 的 [9:8]，设置成11，则表示不分频。f(DTS)=f(T1);	//得到f(DTS)这个STM32规定的很重要的参数
		该信号要被采样，才能知道是0是1；滤波器就对TI采样，采样频率与滤波器长度
			TIMx->CCMR1 的 [7:4]来配置； 对TI的采样频率f(SAMPLING)=xxxx（f(DTS)的基础上的分频）；
	从ETR出来的信号叫TI1FP1，上面用来驱动CNT的频率，就是这个信号触发的。
	
三.TI1FP1的两路去处：1.用于时基单元驱动CNT的信号 2.用于提取出被该信号（也就是原始信号，只不过经过了一些筛选标准）的周期和占空比
	去处1.进入时基单元
		上升沿/下降沿计数？TIMx->CR1 的 5th；
		TIMx->PSC;
		TIMx->ARR;
	去处2.TI1FP1进入IC1和IC2；
		进入IC1，其周期最终（还没进去）会被存入 TIMx->CCR1（捕获/比较1寄存器）;
			TIM3->CCMR1 配置IC1FP1映射到TI1
		进入IC2，其占空时间最终（还没进去）会被存入 TIMx->CCR2;
			TIM3->CCMR1	配置IC2FP1映射到TI2
			
四.配置相应的中断、中断使能
		MY_NVIC_Init();
		TIM2->DIER，0th、6th；
		
五.使能定时器
	TIMx->CR1 的 0th；
///////////		对应上述步骤的代码案例	//////////
//初始化
void Encoder_Init_TIM2(void)
{
	//一：--------------------------------------------------
	RCC->APB1ENR|=1<<0;     //TIM2时钟使能
	RCC->APB2ENR|=1<<2;     //使能PORTA时钟
	GPIOA->CRL&=0XFFFFFF00; //PA0 PA1
	GPIOA->CRL|=0X00000044; //浮空输入
	//二：--------------------------------------------------
	TIM2->CR1 &=~(3<<8);// 选择时钟分频：不分频
	TIM2->CCMR1 |= 3<<4; //	IC1F='1000' 输入捕获1滤波器
	//三：--------------------------------------------------
		//时基单元相关
		TIM2->CR1 &=~(3<<5);// 选择计数模式:边沿对齐模式，上升/下降沿都计数
		TIM2->PSC = 0x0;	//预分频器
		TIM2->ARR = ENCODER_TIM_PERIOD;//设定计数器自动重装值，#define ENCODER_TIM_PERIOD (u16) 65535
		//通道相关
		TIM2->SMCR |= 3<<0;	 //SMS='011' 所有的输入均在上升沿和下降沿有效
			//通道1
			TIM2->CCMR1 |= 1<<0; 			//CC1S='01' IC1FP1映射到TI1
				TIM2->CCER &= ~(1<<1);	 		//CC1P='0'	 IC1FP1不反相，IC1FP1=TI1
			//通道2
			TIM2->CCMR1 |= 1<<8; 			//CC2S='01' IC2FP2映射到TI2
				TIM2->CCER &= ~(1<<5);	 		//CC2P='0'	 IC2FP2不反相，IC2FP2=TI2
	//四：--------------------------------------------------
	TIM2->DIER|=1<<0;   //允许更新中断				
	TIM2->DIER|=1<<6;   //允许触发中断（允许刹车中断）
	MY_NVIC_Init(1,3,TIM2_IRQn,1);
	//五：--------------------------------------------------
	TIM2->CR1 |= 0x01;    //CEN=1，使能定时器
}
//读取
int Read_Encoder(u8 TIMX)
{
    int Encoder_TIM;    
   switch(TIMX)
	 {
	   case 2:  Encoder_TIM= (short)TIM2 -> CNT;  
							TIM2 -> CNT=0;
							break;	
		 case 3:  Encoder_TIM= (short)TIM3 -> CNT;  
							TIM3 -> CNT=0;
							break;	
		 case 4:  Encoder_TIM= (short)TIM4 -> CNT;  
							TIM4 -> CNT=0;
							break;	
		 default:  Encoder_TIM=0;
	 }
		return Encoder_TIM;
}
//中断服务函数
void TIM2_IRQHandler(void)
{ 		    		  			    
	if(TIM2->SR&0X0001)//溢出中断
	{    				   				     	    	
	}				   
	TIM2->SR&=~(1<<0);//清除中断标志位 	    
}
**********************************************************************************************/

/****************************************电机、舵机***********************************************
//电机
/////	思路	//////
驱动点击的PWM需要互补，也就是两路PWM，一路为正，另一路则为负，反之亦然。有正有负，电机才能被驱动；
CNT通过内部时钟自动向上计数，用户手动在对应的 TIMx->CCRx里写值，CCR值和CNT作比较，CNT大于（or设定成小于）CCRx则输出高（or设定的低）电平；
CNT是从0往ARR数

////	步骤	////
一、使能相应的时钟，以及需要的IO口。

二、配置TIM成PWM模式：
	TIMx->CCMRx 在 CCxS位=00（默认就=00）的情况下，[14;12]or[7:5]选择PWM模式
	PWM模式1：向上计数；	CNT在0→【CCRx】，输出1；	//如果反转了，就输出0
						CNT在CCRx→ARR，输出0；
						
	PWM模式2：向下计数；	CNT在CCRx←【ARR】，输出1；	//如果反转了，就输出0				
						CNT在0←CCRx，输出0		
						
三、管理对应的通道；	TIMx->CCMR1 管通道2、1
					TIMx->CCMR2	管通道4、3
					
	TIMx->CCMR1的[9:8]、[1:0]默认的00就好
	TIMx->CCMR2的[9:8]、[1:0]默认的00就好
	
	由于这个PWM波是要变动的，意味着要一边运行，一遍修改寄存器，故而启动影子寄存器（即，预装载使能，这一操作）
	TIMx->CCMR1	的11th、3rd
	TIMx->CCMR2	的11th、3rd
	TIMx->CR1	的APRE（7th），TIM的缓冲
	
四、使能CCR寄存器
	TIMx->CCER	的CC1E、CC2E、CC3E、CC4E
	
五、时基单元配置
	TIMx->PSC;	TIMx->ARR;

六、使能TIMx
	TIMx->CR1 的0th；
	
////	对应上述步骤的代码案例	////
void Motor_PWM_Init(u16 arr,u16 psc)
{		 
	//一：--------------------------------------------
	RCC->APB1ENR|=1<<2;       //TIM4时钟使能    
	RCC->APB2ENR|=1<<3;       //PORTB时钟使能   
	GPIOB->CRL&=0X00FFFFFF;   //PORTB6 7  8 9推挽输出
	GPIOB->CRL|=0XBB000000;   //PORTB6 7  8 9推挽输出
	GPIOB->CRH&=0XFFFFFF00;   //PORTB6 7  8 9推挽输出
	GPIOB->CRH|=0X000000BB;   //PORTB6 7  8 9推挽输出
	//二：---------------------------------------------
	TIM4->CCMR1|=6<<4;	//CH1 PWM1模式	
	TIM4->CCMR1|=6<<12; //CH2 PWM1模式	
	TIM4->CCMR2|=6<<4;	//CH3 PWM1模式	
	TIM4->CCMR2|=6<<12; //CH4 PWM1模式	
	//三：---------------------------------------------
	TIM4->CCMR1|=1<<3; //CH1预装载使能	  
	TIM4->CCMR1|=1<<11;//CH2预装载使能	 
	TIM4->CCMR2|=1<<3; //CH3预装载使能	  
	TIM4->CCMR2|=1<<11;//CH4预装载使能
	TIM4->CR1=0x80;    //ARPE使能
	//四：----------------------------------------------
	TIM4->CCER|=1<<0;  //CH1输出使能	
	TIM4->CCER|=1<<4;  //CH2输出使能	   
	TIM4->CCER|=1<<8;  //CH3输出使能	
	TIM4->CCER|=1<<12; //CH4输出使能	
	//五：----------------------------------------------
	TIM4->ARR=arr;//设定计数器自动重装值 
	TIM4->PSC=psc;//预分频器不分频   
	//六：---------------------------------------------
	TIM4->CR1|=0x01;   //使能定时器
} 

具体驱动电机的函数，只要在任意函数里对TIMx->CCRx赋值即可；
	
	
